from .base_llm import BaseLLM
from .sft import test_model



def load() -> BaseLLM:
    from pathlib import Path
    from peft import PeftModel
    import torch
    
    # Disable gradients immediately
    torch.set_grad_enabled(False)
    
    model_name = "rft_model"
    model_path = Path(__file__).parent / model_name
    model_path_str = str(model_path)
    
    llm = BaseLLM()
    llm.model = PeftModel.from_pretrained(llm.model, model_path_str).to(llm.device)
    llm.model.eval()

    return llm


def train_model(
    output_dir: str = "homework/rft_model",
    data_path: str = "data/rft.json",
    **kwargs,
):
    """
    Fine-tunes the model using rejection sampling technique.
    Uses data generated by datagen.py that contains chain-of-thought reasoning.
    """
    from pathlib import Path
    import os
    import json
    from transformers import Trainer, TrainingArguments, default_data_collator, EarlyStoppingCallback
    from peft import get_peft_model, LoraConfig, TaskType
    
    from .base_llm import BaseLLM
    from .data import Dataset
    from .sft import TokenizedDataset, tokenize
    
    # Create output directory
    output_dir = Path(output_dir)
    os.makedirs(output_dir, exist_ok=True)
    
    # Load the RFT data
    try:
        with open(data_path, 'r') as f:
            rft_data = json.load(f)
        print(f"Loaded {len(rft_data)} examples from {data_path}")
    except FileNotFoundError:
        raise ValueError(f"Data file {data_path} not found. Run datagen.py first to generate the dataset.")
    
    # Initialize the base model and tokenizer
    llm = BaseLLM()
    model = llm.model
    tokenizer = llm.tokenizer
    
    # Enhanced LoRA configuration for RFT (with more capacity)
    lora_config = LoraConfig(
        task_type=TaskType.CAUSAL_LM,
        bias="none",
        target_modules=["q_proj", "k_proj", "v_proj", "o_proj", "gate_proj", "down_proj", "up_proj"],
        r=16,  # Increased rank for better reasoning
        lora_alpha=64,  # 4x the rank
        lora_dropout=0.07,
    )
    
    # Get the LoRA model
    model = get_peft_model(model, lora_config)
    
    # Enable input require gradients to avoid bug when using GPU
    model.enable_input_require_grads()
    
    # Print trainable parameters info
    model.print_trainable_parameters()
    
    # Custom dataset class for RFT data
    class RFTDataset:
        def __init__(self, tokenizer, data):
            self.tokenizer = tokenizer
            self.data = data
        
        def __len__(self):
            return len(self.data)
        
        def __getitem__(self, idx):
            item = self.data[idx]
            # Format data for training
            return tokenize(self.tokenizer, 
                            question=item["question"], 
                            answer=item["reasoning"])
    
    # Create training dataset
    train_dataset = RFTDataset(tokenizer, rft_data)
    
    # Create simple validation dataset
    valid_data = Dataset("valid")
    # For validation, we'll use a simplified approach
    valid_rft_data = [
        {"question": q, "reasoning": f"<answer>{a}</answer>"} 
        for q, a in valid_data
    ]
    eval_dataset = RFTDataset(tokenizer, valid_rft_data)
    
    # Training arguments
    training_args = TrainingArguments(
        output_dir=str(output_dir),
        per_device_train_batch_size=32,
        #gradient_accumulation_steps=2,  # Added back for effective batch size of 32
        num_train_epochs=15,  # More epochs for better learning
        learning_rate=8e-5,
        #warmup_ratio=0.1,  # Add warmup
        #lr_scheduler_type="cosine",  # Add scheduler
        #weight_decay=0.01,  # Add weight decay for regularization
        gradient_checkpointing=True,
        #max_grad_norm=1.0,  # Add gradient clipping
        logging_dir=str(output_dir),
        logging_steps=10,
        report_to="tensorboard",
        save_strategy="no",
        #save_steps=50,
        #eval_strategy="steps",
        #eval_steps=50,
        #load_best_model_at_end=True,
        #metric_for_best_model="eval_loss",
        #greater_is_better=False,
        #remove_unused_columns=False,
        fp16=True,  # Add mixed precision training if GPU available
    )
    
    # Initialize the Trainer
    trainer = Trainer(
        model=model,
        args=training_args,
        train_dataset=train_dataset,
        eval_dataset=eval_dataset
        #data_collator=default_data_collator,
        #callbacks=[EarlyStoppingCallback(early_stopping_patience=3)]
    )
    
    # Start training
    trainer.train()
    
    # Save the final model to the specified directory
    trainer.save_model(str(output_dir))
    
    # Test the trained model
    #print("Evaluating the fine-tuned model...")
    #test_model(str(output_dir))
    
    #return output_dir

if __name__ == "__main__":
    from fire import Fire

    Fire({"train": train_model, "test": test_model, "load": load})
